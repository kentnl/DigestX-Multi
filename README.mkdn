# NAME

DigestX::Multi - Simplify digesting the same content with multiple digesters.

# VERSION

version 0.001000

# SYNOPSIS

    require Digest::SHA3;
    require Digest::SHA;
    require Digest::Whirlpool;

    my $md = DigestX::Multi->new();
    $md->add_digester( 'sha3-512' => Digest::SHA3->new(512) );
    $md->add_digester( 'sha2-512' => Digest::SHA->new(512) );

    # Add byte-strings to all current digesters.
    $md->append_bytes("ByteString", "ByteString", "ByteString");

    # Read IO Handle into all current digesters.
    $md->append_filehandle( $io_handle );

    # Add a digester later that only includes later content
    $md->append_digester( 'whirlpool' => Digest::Whirlpool->new() );

    # Open "path/to/file" and read it into all current digesters.
    $md->append_file( "path/to/file" );

    # Get digest hashes
    # Note: This is intended to be **nondestructive**
    # and internally clones each digester before computing the state.
    my $hashref = $md->digests( format => 'binary' );
     ..         = $md->digests( format => 'hex' );
     ..         = $md->digests( format => 'base64' );


    # true/false
    if ( $md->is_valid( format => 'base64' , digests => $hashref ) ) {
      ...
    }


    # throw exception with details if not valid
    $md->assert_valid( format => 'base64', digests => $hashref );

# METHODS

## `new`

Create an instance of DigestX::Multi.

    my $instance = DigestX::Multi->new();
    my $instance = DigestX::Multi->new( digesters => { identity => Digest::MD5->new(), } );

This instance starts off with no child digesters, but they can be added via `add_digester`,
or passed in during construction via `digesters` as a hash.

## `add_digester`

Add a new `Digest` child to this instance.

    $instance->add_digester( my-name => Digest::SHA->new(512) );

`my-name` must be unique and non-existing.

This method can be called at any time, as long as the user is aware that adding a new `Digester` late in the cycle
will result in the "Late" digester not including data that was "append"'d previously.

This is deemed a feature.

## `clone`

Create a new `Digest::Multi` object where all its child `digesters` are clones
of this one.

    my $clone = $instance->clone;

## `reset_digesters`

Call `reset` on all child digesters.

    $instance->reset_digesters;

## `append_bytes`

Append all of the strings passed to each child `digester`.

    $instance->append_bytes("Hello World", "This is also a byte string");

This essentially calls [`->add`](https://metacpan.org/pod/Digest::base#add) on all child `digesters` as is.

## `append_filehandle`

Stream a given `IO::Handle` until `EOF` and append its contents efficiently to each current `digester` child.

    $instance->append_filehandle( path('./foo')->openr_raw );

This will read the given `filehandle` in `4KB` chunks and rotate each chunk into each digester via `append_bytes`

The given `filehandle` really should be opened in `raw` mode as everything in `Digest` really expects `bytes`.

## `append_file`

Open the given file in raw mode and iterate its contents through all attached `digesters`.

    $instance->append_file("./foo");

This will open the given file in `raw` mode and rotate its contents into the digesters via `append_filehandle`

## `digests`

Return a `HashRef` of `identity => digest`.

    my $hash = $instance->digests(); # format binary assumed

    my $hash = $instance->digests( format => 'binary' );    # use literal binary data
             = $instance->digests( format => 'hex' );       # hex encode digest data
             = $instance->digests( format => 'uuencode' );  # uuencode digest data
             = $instance->digests( format => 'base64' );    # base64(*) encode digest data
             = $instance->digests( encode => sub { } );     # use a custom binary encoding function.

**\*** Base64 data has trailing `=` padding characters stripped like `Digest::base`.

**NOTE:** This method is **NON DESTRUCTIVE** and can called multiple times to provide the same hash in different encodings.

To facilitate this, `->clone` is called on each underlying `digester` before calling their respective `digest` method.

If a destructive pattern is required, please call `->reset_digesters` at the appropriate time.

## `is_valid`

Validate an existing `HashRef` against accumulated data.

    my $boolean = $instance->is_valid( digests => $hash );  # format binary assumed
    my $boolean = $instance->is_valid( format => binary,  digests => $hash );
                = $instance->is_valid( encode => sub { }, digests => $hash );

See ["VALIDATION"](#validation)

## `assert_valid`

Demand accumulated data to be valid using `HashRef` as a reference, or die explaining all the reasons it isn't.

    $instance->assert_valid( digests => $hash );  # format binary assumed
             ->assert_valid( format => 'binary', digests => $hash );
             ->assert_valid( encode => sub { } , digests => $hash );

See ["VALIDATION"](#validation)

# VALIDATION

Validation rules are as follows:

- If the "Digests" hash ( that is, the result of digesting the data )
has no keys, then its a failure, on grounds of the digest configuration being
broken.
- If the "Validation" hash ( that is, the hash the digested data is to be
compared against ), then its a failure, on grounds that the validation hash
being empty indicates data corruption.
- If a key is present in the "Validation hash" but not in the "Digests"
hash, then its a failure, on grounds that we were unable to locally validate
the data against it.
- If a key is present in the "Digests" hash, but not in the "Validation"
hash, then its a failure, on grounds that this may be a hash that is necessary
to confirm no-tampering, and thus, its absence is equivalent to it being
wrong.
- If any digest does not match in each hash via corresponding keys, then
its a failure, because any digest failing to match is a sure sign of some kind
of problem occurring.
- Finally, if the above conditions are satisfied, assuming the values in
the "Digests" and "Validation" hash are equal for all keys, then its a success.

# AUTHOR

Kent Fredric <kentnl@cpan.org>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2016 by Kent Fredric <kentfredric@gmail.com>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
